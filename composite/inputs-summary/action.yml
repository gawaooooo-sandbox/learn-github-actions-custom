name: Inputs Summary
description: |
  This action logs workflow inputs and generates a Markdown summary to visually organize the provided data.

  ## Usage Example
  ```yaml
  steps:
    - name: Create Inputs Summary
      uses: composite/inputs-summary@v0 # This is the version of the action
      with:
        workflow-inputs: '{"build_target":"production","test_mode":"enabled"}'
  ```

  In this example, workflow-inputs are set directly as a JSON string.
  To dynamically pass inputs from another step, use the `toJSON` function in your workflow file.
  This serialization method ensures that the JSON format is correctly handled and parsing errors are avoided.

inputs:
  workflow-inputs:
    description: |
      The inputs provided to the workflow.
      Pass inputs context as a JSON string, or use `toJSON` function to serialize inputs in the workflow file.
    required: true

runs:
  using: composite
  steps:
    - name: Create Inputs Summary
      uses: actions/github-script@v7
      with:
        script: |
          const inputsStr = process.env.INPUTS;
          console.log(typeof inputsStr);
          console.log(inputsStr);

          // 文字列をJSONオブジェクトに変換
          try {
            const inputs = JSON.parse(inputsStr);
            console.log(inputs);
          } catch (e) {
            console.warn('Warning: Failed to parse the JSON input:', e);

            core.summary
              .addRaw("### ⚠️ Warning\n")
              .addRaw("Failed to parse the provided JSON input. This may occur if the input format is incorrect or missing required fields. Please review the input format and try again.\n")
              .write();

            return; // JSON解析に失敗した場合、ここで処理を中断
          }

          const parametersTable = [
            [{ data: 'key', header: true}, { data: 'value', header: true }],
            ['branch', '${{ github.ref_name }}']
          ];

          for ([key, value] of Object.entries(inputs)) {
            // boolean値と数値を文字列に変換する
            const valueStr = typeof value === 'boolean' || typeof value === 'number' ? value.toString() : value;
            parametersTable.push([key, valueStr])
          }

          await core.summary
            .addRaw("### 📝 Inputs \n")
            .addTable(parametersTable)
            .write()
      env:
        INPUTS: ${{ inputs.workflow-inputs }}
